/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { Color, MeshStandardMaterial } from 'three';
import {useMaterialStore, useConfigSteps} from "../UI/EditUI"
import * as THREE from "three"

export default function Glove(props) {
  const { nodes, materials } = useGLTF('./models/glove_uv.glb')


const normalMap = useTexture("./textures/nleather5.png")

const palmbackNormal = useTexture("./textures/nleather5.png")


// palmbackNormal.repeat.set(5,5)


const steps = useConfigSteps((state)=> state.steps)
const color = useMaterialStore((state)=> state.color)
const isMetallic = useMaterialStore((state)=> state.isMetallic)



const fistRef = useRef()
const thumbRef = useRef()
const wristRef = useRef()
const PalmWristRef = useRef()
const insideThumbRef = useRef()
const trimRef = useRef()
const lacesRef = useRef()
const thumbConnectRef = useRef()


useEffect(()=>{
  
  palmbackNormal.wrapS = THREE.RepeatWrapping;
		palmbackNormal.WrapT = THREE.RepeatWrapping;
		palmbackNormal.needsUpdate = true;

  if (steps === 0) {
    fistRef.current.material.color = new Color(color)
    fistRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    fistRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  } else if( steps === 1){
    thumbRef.current.material.color = new Color(color)
    thumbRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    thumbRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  } else if (steps === 2) {
    wristRef.current.material.color = new Color(color)
    wristRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    wristRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  } else if (steps === 4) {
    PalmWristRef.current.material.color = new Color(color)
    PalmWristRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    PalmWristRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  } else if (steps === 5) {
    insideThumbRef.current.material.color = new Color(color)
    insideThumbRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    insideThumbRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  } else if (steps === 6) {
    thumbConnectRef.current.material.color = new Color(color)
    thumbConnectRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    thumbConnectRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  } 
  
  else if (steps === 7) {
    trimRef.current.material.color = new Color(color)
    trimRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    trimRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  } else if (steps === 8) {
    lacesRef.current.material.color = new Color(color)
    lacesRef.current.material.roughness = isMetallic ? 0.2 : 0.4
    lacesRef.current.material.metalness = isMetallic ? 0.8 : 0.0
  }


  
}, [color])






const palmbackMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: palmbackNormal,
  });
}, [palmbackNormal]);

const thumboutMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);

const wristbackMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);

const restMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);

const PalmWristMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);

const insideThumbMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);


const trimMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);

const lacesMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);


const thumbConnectMat = useMemo(() => {
  return new MeshStandardMaterial({
    normalMap: normalMap,
  });
}, [normalMap]);





{/* <meshStandardMaterial normalMap={normalMap} roughness={0.2} metalness={0.8} color={"#EB1F00"}/> */}
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.black.geometry}
        material={materials['Material.001']}
        position={[0.004, -0.57, 0.137]}
      >
        
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.palmback.geometry}
        material={palmbackMat}
        ref={fistRef}
        position={[0, 0.141, 0.173]}
      >
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wristback.geometry}
        material={wristbackMat}
        position={[0, 0.141, 0.173]}
        ref={wristRef}
      >
        {/* <meshStandardMaterial normalMap={normalMap} /> */}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.piping.geometry}
        material={trimMat}
        ref={trimRef}
        position={[0.002, -0.601, 0.1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.stitches.geometry}
        material={materials['Material.014']}
        position={[-0.013, -0.153, -0.017]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.tstrip.geometry}
        material={thumbConnectMat}
        position={[0, 0, 0.209]}
      />
      <group position={[0, 0.097, 0.173]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_15.geometry}
          ref={PalmWristRef}
          material={PalmWristMat}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_15_1.geometry}
          material={materials.Holes}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.connect.geometry}
        material={thumbConnectMat}
        ref={thumbConnectRef}
        position={[-0.621, 1.295, -0.279]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.thumbin.geometry}
        material={insideThumbMat}
        ref={insideThumbRef}
        position={[-0.426, 0.593, -0.2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.thumbout.geometry}
        material={thumboutMat}
        position={[-0.799, 0.327, 0.173]}
        ref={thumbRef}
      >
         {/* <meshStandardMaterial normalMap={normalMap} /> */}
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Lace_left.geometry}
        material={lacesMat}
        ref={lacesRef}
        position={[0.01, -0.76, -0.201]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Lace_right.geometry}
        material={lacesMat}
        position={[0.01, -0.76, -0.201]}
        rotation={[-Math.PI, 0, 0]}
        scale={-1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.madeforchampions.geometry}
        material={wristbackMat}
        position={[0.008, -0.942, 0.559]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.564}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane001.geometry}
        material={materials.Flag}
        position={[0.018, -1.431, 0.373]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.786}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane006.geometry}
        material={materials['HECHO EN MEXICO']}
        position={[0.018, -1.431, 0.363]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.334, 0.648, 0.067]}
      />
    </group>
  )
}

useGLTF.preload('./models/glove_uv.glb')
