/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { Color, MeshStandardMaterial } from "three";
import { useMaterialStore, useConfigSteps } from "../UI/EditUI";
import * as THREE from "three";

export default function Glove(props) {
  const { nodes, materials } = useGLTF("./models/glove_uv.glb");

  const normalMap = useTexture("./textures/nleather5.png");
  const palmbackNormal = useTexture("./textures/nleather5.png");

  const steps = useConfigSteps((state) => state.steps);
  const color = useMaterialStore((state) => state.color);
  const isMetallic = useMaterialStore((state) => state.isMetallic);

  const fistRef = useRef();
  const thumbRef = useRef();
  const wristRef = useRef();
  const PalmWristRef = useRef();
  const insideThumbRef = useRef();
  const trimRef = useRef();
  const lacesRef = useRef();
  const thumbConnectRef = useRef();

  useEffect(() => {
    palmbackNormal.wrapS = THREE.RepeatWrapping;
    palmbackNormal.WrapT = THREE.RepeatWrapping;
    palmbackNormal.needsUpdate = true;

    const updateMaterial = (ref) => {
      if (ref.current) {
        ref.current.material.color = new Color(color);
        ref.current.material.roughness = isMetallic ? 0.2 : 0.4;
        ref.current.material.metalness = isMetallic ? 0.8 : 0.0;
      }
    };

    switch (steps) {
      case 0:
        updateMaterial(fistRef);
        break;
      case 1:
        updateMaterial(thumbRef);
        break;
      case 2:
        updateMaterial(wristRef);
        break;
      case 4:
        updateMaterial(PalmWristRef);
        break;
      case 5:
        updateMaterial(insideThumbRef);
        break;
      case 6:
        updateMaterial(thumbConnectRef);
        break;
      case 7:
        updateMaterial(trimRef);
        break;
      case 8:
        updateMaterial(lacesRef);
        break;
      default:
        break;
    }
  }, [color, isMetallic, steps]);

  // Define the material for the "Made for Champions" text
  const madeForChampionsMat = useMemo(() => {
    const material = new MeshStandardMaterial({
      color: new Color(color), // Match wrist's color
      roughness: 0.6, // Slight roughness for stitching-like effect
      metalness: isMetallic ? 0.2 : 0.0, // Minimal metallic effect
      normalMap: normalMap, // Add stitching-like texture
    });

    material.needsUpdate = true; // Ensure render updates
    return material;
  }, [color, isMetallic, normalMap]);

  const palmbackMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: palmbackNormal,
    });
  }, [palmbackNormal]);

  const thumboutMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  const wristbackMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  const restMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  const PalmWristMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  const insideThumbMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  const trimMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  const lacesMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  const thumbConnectMat = useMemo(() => {
    return new MeshStandardMaterial({
      normalMap: normalMap,
    });
  }, [normalMap]);

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.black.geometry}
        material={materials["Material.001"]}
        position={[0.004, -0.57, 0.137]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.palmback.geometry}
        material={palmbackMat}
        ref={fistRef}
        position={[0, 0.141, 0.173]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wristback.geometry}
        material={wristbackMat}
        position={[0, 0.141, 0.173]}
        ref={wristRef}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.piping.geometry}
        material={trimMat}
        ref={trimRef}
        position={[0.002, -0.601, 0.1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.stitches.geometry}
        material={materials["Material.014"]}
        position={[-0.013, -0.153, -0.017]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.tstrip.geometry}
        material={thumbConnectMat}
        position={[0, 0, 0.209]}
      />
      <group position={[0, 0.097, 0.173]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_15.geometry}
          ref={PalmWristRef}
          material={PalmWristMat}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_15_1.geometry}
          material={materials.Holes}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.connect.geometry}
        material={thumbConnectMat}
        ref={thumbConnectRef}
        position={[-0.621, 1.295, -0.279]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.thumbin.geometry}
        material={insideThumbMat}
        ref={insideThumbRef}
        position={[-0.426, 0.593, -0.2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.thumbout.geometry}
        material={thumboutMat}
        position={[-0.799, 0.327, 0.173]}
        ref={thumbRef}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Lace_left.geometry}
        material={lacesMat}
        ref={lacesRef}
        position={[0.01, -0.76, -0.201]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Lace_right.geometry}
        material={lacesMat}
        position={[0.01, -0.76, -0.201]}
        rotation={[-Math.PI, 0, 0]}
        scale={-1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.madeforchampions.geometry}
        material={madeForChampionsMat} // Apply custom material for "Made for Champions"
        position={[0.008, -0.942, 0.559]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.564}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane001.geometry}
        material={materials.Flag}
        position={[0.018, -1.431, 0.373]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.786}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane006.geometry}
        material={materials["HECHO EN MEXICO"]}
        position={[0.018, -1.431, 0.363]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.334, 0.648, 0.067]}
      />
    </group>
  );
}

useGLTF.preload("./models/glove_uv.glb");
